#!/usr/bin/env node

/**
 * Health Check Script for Human API
 * Monitors application health and generates reports
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { execSync } from 'child_process';
import { join } from 'path';

class HealthChecker {
  constructor() {
    this.results = {
      timestamp: new Date().toISOString(),
      status: 'healthy',
      checks: [],
    };
  }

  async runCheck(name, checkFn) {
    try {
      const startTime = Date.now();
      const result = await checkFn();
      const duration = Date.now() - startTime;

      this.results.checks.push({
        name,
        status: 'pass',
        duration,
        result,
      });
    } catch (error) {
      this.results.checks.push({
        name,
        status: 'fail',
        error: error.message,
      });
      this.results.status = 'unhealthy';
    }
  }

  async checkTests() {
    try {
      const output = execSync('npm test', { encoding: 'utf8', cwd: process.cwd() });
      return {
        message: 'All tests passing',
        output: output.split('\n').slice(-5).join('\n'), // Last 5 lines
      };
    } catch (error) {
      throw new Error(`Tests failed: ${error.message}`);
    }
  }

  async checkBuild() {
    try {
      execSync('npm run build:core', { encoding: 'utf8', cwd: process.cwd() });
      return { message: 'Core build successful' };
    } catch (error) {
      throw new Error(`Build failed: ${error.message}`);
    }
  }

  async checkDependencies() {
    try {
      const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
      const vulnerabilities = execSync('npm audit --json', { encoding: 'utf8' });

      return {
        message: 'Dependencies checked',
        totalDeps:
          Object.keys(packageJson.dependencies || {}).length +
          Object.keys(packageJson.devDependencies || {}).length,
        vulnerabilities: JSON.parse(vulnerabilities).vulnerabilities?.total || 0,
      };
    } catch (error) {
      return { message: 'Could not check dependencies', error: error.message };
    }
  }

  async checkCodeQuality() {
    try {
      execSync('npm run format:check', { encoding: 'utf8', cwd: process.cwd() });
      return { message: 'Code formatting is correct' };
    } catch (error) {
      return { message: 'Code formatting issues found', warning: true };
    }
  }

  async checkFileStructure() {
    const requiredFiles = [
      'package.json',
      'README.md',
      'core/chunk/chunker.ts',
      'core/crypto/kdf.ts',
      'apps/desktop/src-tauri/Cargo.toml',
    ];

    const missingFiles = requiredFiles.filter(file => !existsSync(file));

    if (missingFiles.length > 0) {
      throw new Error(`Missing required files: ${missingFiles.join(', ')}`);
    }

    return { message: 'File structure is intact', filesChecked: requiredFiles.length };
  }

  async generateReport() {
    const report = `# Health Check Report

**Timestamp:** ${this.results.timestamp}
**Overall Status:** ${this.results.status === 'healthy' ? '✅ HEALTHY' : '❌ UNHEALTHY'}

## Checks Performed

${this.results.checks
  .map(
    check => `
### ${check.name}
- **Status:** ${check.status === 'pass' ? '✅ PASS' : '❌ FAIL'}
- **Duration:** ${check.duration ? `${check.duration}ms` : 'N/A'}
${check.result ? `- **Result:** ${JSON.stringify(check.result, null, 2)}` : ''}
${check.error ? `- **Error:** ${check.error}` : ''}
`
  )
  .join('\n')}

## Summary

- **Total Checks:** ${this.results.checks.length}
- **Passed:** ${this.results.checks.filter(c => c.status === 'pass').length}
- **Failed:** ${this.results.checks.filter(c => c.status === 'fail').length}
- **Warnings:** ${this.results.checks.filter(c => c.warning).length}

---
*Generated by Human API Health Check System*
`;

    writeFileSync('health-report.md', report);
    console.log('Health check completed. Report saved to health-report.md');
  }

  async run() {
    console.log('🔍 Running Health Checks...\n');

    await this.runCheck('Test Suite', () => this.checkTests());
    await this.runCheck('Build System', () => this.checkBuild());
    await this.runCheck('Dependencies', () => this.checkDependencies());
    await this.runCheck('Code Quality', () => this.checkCodeQuality());
    await this.runCheck('File Structure', () => this.checkFileStructure());

    await this.generateReport();

    if (this.results.status === 'unhealthy') {
      process.exit(1);
    }
  }
}

// Run health check
const checker = new HealthChecker();
checker.run().catch(console.error);
